class ReservationStation:
    def __init__(self, name, num_stations, execution_cycles):
        self.name = name
        self.num_stations = num_stations
        self.execution_cycles = execution_cycles
        self.stations = [{'busy': False, 'op': None, 'Vj': None, 'Vk': None, 'Qj': None, 'Qk': None, 'cycles_left': 0}
                         for _ in range(num_stations)]

    def is_available(self):
        """Check if any station in the reservation station is not busy."""
        return any(not station['busy'] for station in self.stations)

    def allocate(self, op, Vj=None, Vk=None, Qj=None, Qk=None):
        """Allocate an operation to an available reservation station."""
        for station in self.stations:
            if not station['busy']:  # If the station is not busy
                station.update({
                    'busy': True,
                    'op': op,
                    'Vj': Vj,
                    'Vk': Vk,
                    'Qj': Qj,
                    'Qk': Qk,
                    'cycles_left': self.execution_cycles
                })
                return station
        return None  # No available station

    def execute(self, current_cycle, metadata):
        """Execute the instruction in the reservation station."""
        for station in self.stations:
            if station['busy'] and station['cycles_left'] > 0:
                if station['cycles_left'] == self.execution_cycles:  # Start Execution
                    for entry in metadata:
                        if entry['instruction'] == station['op'] and entry['start_exec'] is None:
                            entry['start_exec'] = current_cycle
                            break

                station['cycles_left'] -= 1  # Decrement the cycles left

                if station['cycles_left'] == 0:  # Finish Execution
                    if station['op'] == "ADD":
                        if station['Vj'] is not None and station['Vk'] is not None:
                            station['result'] = station['Vj'] + station['Vk']
                        else:
                            print(f"Error: ADD operands not resolved: Vj={station['Vj']}, Vk={station['Vk']}")
                            continue  # Skip this station and go to the next
                    elif station['op'] == "LOAD":
                        if station['Vk'] is not None:
                            station['result'] = station['Vk']  # Simulated memory load
                        else:
                            print(f"Error: LOAD operand not resolved: Vk={station['Vk']}")
                            continue
                    elif station['op'] == "STORE":
                        if station['Vj'] is not None:
                            station['result'] = station['Vj']  # Simulated memory store
                        else:
                            print(f"Error: STORE operand not resolved: Vj={station['Vj']}")
                            continue
                    else:
                        station['result'] = 0  # Default for unsupported operations

                    for entry in metadata:
                        if entry['instruction'] == station['op'] and entry['finish_exec'] is None:
                            entry['finish_exec'] = current_cycle
                            break

                    return station  # Return the completed station
        return None  # No station finished execution yet

    def release_station(self, station):
        # Reset the station's state
        station['busy'] = False
        station['op'] = None
        station['Vj'] = None
        station['Vk'] = None
        station['Qj'] = None
        station['Qk'] = None
        station['cycles_left'] 
